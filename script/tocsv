#!/usr/bin/env coffee
fs  = require 'fs'
glob = require 'glob'
vm   = require 'vm'
path = require 'path'
mappings = require '../source/javascripts/mappings'


prefix = [
  'PTS',
  'FGM',
  'FGA',
  'FG_PCT',
  'FG3M',
  'FG3A',
  'FG3_PCT',
  'EFG_PCT',
  'PTS_TOT'
]

metricsSkip = [
  'GP'
  'MIN'
  'PLAYER_ID'
  'PLAYER'
  'FIRST_NAME'
  'LAST_NAME'
  'TEAM_ABBREVIATION'
]

players = {}
headers = []

# Convert strings like 6-11 to their inch equivelant
#
# returns an integer
heightToInches = (height) ->
  [feet, inches] = height.split('-').map (d) -> parseFloat d
  (feet * 12) + inches

# Go through team roster files and fill in some general player
# metadata including position, height, weight, etc.
#
# returns nothing
glob 'data/teams/*.json', (err, paths) ->
  for location in paths
    data = JSON.parse(fs.readFileSync location, 'utf8')
    pheaders = data.resultSets[0].headers.map (h) -> h.toLowerCase()
    headers.concat(pheaders) if headers.length == 0

    for pl in data.resultSets[0].rowSet
      tmpplayer = {}
      for stat,i in pl
        hdr = pheaders[i]
        if hdr.toLowerCase() == 'birth_date'
          tmpplayer[hdr] = new Date(stat).toJSON()
        else if hdr.toLowerCase() == 'height'
          tmpplayer[hdr] = heightToInches stat
        else if hdr.toLowerCase() == 'exp'
          tmpplayer[hdr] = if stat == 'R' then 0 else stat
        else
          tmpplayer[hdr] = stat.toString().replace(',', '')

      curplayer = players[tmpplayer.player_id] ?= tmpplayer


# Go through every advanced stat and join in with the player metadata
# above
#
# Returns nothing
glob 'data/stats/*.js', (err, paths) ->
  for location in paths
    data = fs.readFileSync(location, 'utf8')
    sandbox = {}
    vm.runInNewContext data.toString(), sandbox

    # Get an array of every header across all files first
    for key of sandbox
      rs = sandbox[key].resultSets[0]
      headers = headers.concat rs.headers

    # Remove duplicate headers
    headers = headers.filter (val, index, obj) -> obj.indexOf(val) == index

    for key of sandbox
      rs   = sandbox[key].resultSets[0]
      keys = rs.headers
      keyprefix = path.basename(location).replace('.js', '').replace('-', '_')

      # Loop through current advanced stat file and add the stats to the
      # player previously created or create the player
      for stat in rs.rowSet
        player = {}
        player[keys[i]] = val for val,i in stat

        db = players[player.PLAYER_ID]
        continue if !db

        # Set the stats on the stored player
        for name,val of player
          name = "#{keyprefix}_#{name}" if name in prefix and keyprefix isnt 'touches'
          val = null if val is "-"
          db[name.toLowerCase()] = val

  wroteHeaders = false
  for pid, stats of players
    stathead = Object.keys(stats).map (head) ->
      head = 'team' if head is 'team_abbreviation'
      head

    if !wroteHeaders
      console.log stathead.join(',')
      wroteHeaders = true

    vals = []
    for _, val of stats
      vals.push val
    console.log vals.join(',')
